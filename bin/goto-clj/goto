#! /usr/bin/env bb

;; Set GOTO_DATA_PATH to where your locations.yml is
(ns goto)
(require '[clj-yaml.core :as yaml]
         '[clojure.string :as str]
         '[clojure.java.shell :refer [sh]]
         '[clojure.tools.cli :refer [parse-opts]])


;; lib
(defn file-read
  [path]
  (slurp path))

(defn get-locations
  [file]
  (yaml/parse-string (file-read file)))

(defn get-location
  [location-map identifier search-term]
  (clojure.string/replace (get location-map (read-string (concat ":" identifier))) #"SEARCH" search-term))

(defn get-location-type
  [location]
  (cond (str/starts-with? location "https://") :url
        (str/starts-with? location "http://") :url
        (and (str/starts-with? location "file://") (str/ends-with? location "/")) :folder
        (and (str/starts-with? location "file://") (not (str/ends-with? location "/"))) :file))

(defn cleanup-location
  [location location-type]
  (if (or (= location-type :file) (= location-type :folder)) (str/replace location #"file://" "") location))

;; config
(def goto-data-path (System/getenv "GOTO_DATA_PATH"))
(def locations-file (str goto-data-path "/locations.yml"))
(def location-type-assoc {:url "open", :file "cat", :folder "echo"})

;; This is where the magic happens
(defn run
  [locations-file location-type-assoc args opts]
  (print locations-file)
  ;; Read and categorise the location requested
  (def location (get-location (get-locations locations-file) (first args) (second args)))
  (def location-type (get-location-type location))
  (def cleansed-location (cleanup-location location location-type))
  (def location-type-program (get location-type-assoc location-type))
  ;; Create command
  (def command (str/join " " [location-type-program cleansed-location]))
  ;; Run it!
  (if (not (:silent opts))
    (print (str "Running: " command "\n--------------------------------------------------------------------------------\n")))
  (def std (apply sh (str/split command #" ")))
  ; if stderr is not empty, print it
  (print (if (not (empty? (:err std))) (:err std) ""))
  (print (:out std)))


;; CLI stuff
(def cli-options
  ;; An option with a required argument
  [["-s" "--silent" "Silent"]
   ["-h" "--help", "Help"]])

(defn usage [options-summary]
  (->> ["goto is a program that helps you reach your destination as fast as possible. ðŸš€"
        ""
        "Usage: goto [options] [location] [search term]"
        ""
        "Options:"
        options-summary
        ""
        "Examples:"
        "  See list of locations                 :   goto ls"
        "  Go to your favorite online regex tool :   goto regex"
        "  Search google                         :   goto google 'the end of time'"
        "  Get help                              :   goto --help"
        "  Silent output                         :   goto -s regex"
        ""]

       (str/join \newline)))

(defn error-msg [errors]
  (str "The following errors occurred while parsing your command:\n\n"
       (str/join \newline errors)))

(defn exit [status msg]
  (println msg)
  (System/exit status))

(defn validate-args
  "Validate command line arguments. Either return a map indicating the program
  should exit (with a error message, and optional ok status), or a map
  indicating the action the program should take and the options provided."
  [args]
  (let [{:keys [options arguments errors summary]} (parse-opts args cli-options)]
    (cond
      ; exit with help message
      (:help options) {:exit-message (usage summary) :ok? true}
      ; check for existence of arguments
      (empty? arguments) {:exit-message (str "Error: Insuffcient arguments \n\n" (usage summary)) :ok? false}
      :else ; make it run
      {:options options :arguments arguments})))

(let [{:keys [exit-message ok? options arguments]} (validate-args *command-line-args*)]
  (if exit-message
    (exit (if ok? 0 1) exit-message)
    (run locations-file location-type-assoc arguments options)))


;; Watch me program !
(comment
  (System/getenv "HOME")
  (validate-args ["ble"])
  (file-read "locations.yml")
  (yaml/parse-string (file-read "locations.yml"))
  (locations "locations.yml")
  (get (locations "locations.yml") :github)
  (symbol "github")
  (get-location (locations "locations.yml") "github")
  (sh "open" "https://wikipedia.org")
  (clojure.string/replace "abcff" #"f" "yy")
  (get-location-type "something")
  (str/starts-with? "https://wikipedia.org" "https://")
  (if (str/starts-with? "https://wikipedia.org" "https://") :url)
  (if (str/starts-with? "https://wikipedia.org" "file://") :url)
  (get-location-type "https://wikipedia.org")
  (get-location-type "http://wikipedia.org")
  (get-location-type "file://Users/rahulc/dotfiles/")
  (and (str/starts-with? "file://Users/rahulc/dotfiles/" "file://") (not (str/ends-with? "file://Users/rahulc/dotfiles/" "/")))
  (and (str/starts-with? "file://Users/rahulc/dotfiles/" "file://") (str/ends-with? "file://Users/rahulc/dotfiles/" "/"))
  (get-location-type "file://Users/rahulc/dotfiles/README.md")
  (get location-type-assoc :url)
  (get location-type-assoc :file)
  (get location-type-assoc :folder)
  (cleanup-location "file://Users/rahulc/dotfiles/" :file)
  (cleanup-location "https://wikipedia.org" :url)
  (parse-opts ["-h", "-s"] cli-options)
  (let [opts (parse-opts ["-h", "-s"] cli-options)] (get opts :options))
  (let [{:keys [options]} (parse-opts ["-h", "-s"] cli-options)] (:help options))
  (let [{:keys [options summary]} (parse-opts ["-h", "-s"] cli-options)]
    (cond (:help options) {:exit-message (usage summary) :ok? true}))
  (take 5 (range))
  (if (not nil) "a")
  (if [] "a"))

;; TODOs
;; 1. Bash completion
;;  a. Bash completion
;; 2. Read Bash History and suggest
;; 3. Read browser history and suggest
;; 4. Add new link easily
;; 5. Support file, folder, url âœ…
;; 6. Support silent mode, so stdout may be piped âœ…

